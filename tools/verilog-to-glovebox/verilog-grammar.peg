Document = Header "\n" m:Module+ { return m; }

Header = "/* Generated by Yosys" [^*]+ "*/"

Module
    = "\nmodule " name:Identifier "(" ModuleArgList ");\n"
    decls:(Wire / Input / Output)+
    gates:Gate+
    "endmodule\n" {
        return {
            type: "module",
            name: name.value,
            decls: decls,
            gates: gates,
        };
    }

// Arguments are intentionally discarded, they will be collected later
// as inputs
ModuleArgList = (Identifier ", ")* Identifier

Wire = "  wire " size:(Size " ")? name:Identifier ";\n" { return {
    type: "wire",
    size: size === null ? 1 : size[0],
    name: name.value
}; }

Input = "  input " size:(Size " ")? name:Identifier ";\n" { return {
    type: "input",
    size: size === null ? 1 : size[0],
    name: name.value
}; }

Output = "  output " size:(Size " ")? name:Identifier ";\n" { return {
    type: "output",
    size: size === null ? 1 : size[0],
    name: name.value
}; }

Gate
    = NotGate
    / AndGate
    / AndYNGate
    / NandGate
    / OrGate
    / OrYNGate
    / NorGate
    / XorGate
    / XnorGate
    / MuxGate
    / Assignment

Assignment
    = "  assign " dst:Identifier " = " src:AssignmentValue ";\n" { return {
    type: "gate",
    gate: "copy",
    a: src,
    z: dst
}; }

AssignmentValue
    = [0-9] "'h" v:[0-9a-f]+ { return {
    hex: v.join("")
}; }
    / Identifier
    / "{ " head:(AssignmentValue ", ")* tail:AssignmentValue " }" {
    return ((head === null) ? [] : head.map(it => it[0])).concat(tail);
}

NotGate = "  NOT _" [0-9]+ "_ (\n"
    "    .A(" a:Identifier "),\n"
    "    .Z(" z:Identifier ")\n"
    "  );\n" { return {
    type: "gate",
    gate: "not",
    a: a,
    z: z
}; }

AndGate = "  AND _" [0-9]+ "_ (\n"
    "    .A(" a:Identifier "),\n"
    "    .B(" b:Identifier "),\n"
    "    .Z(" z:Identifier ")\n"
    "  );\n" { return {
    type: "gate",
    gate: "and",
    a: a,
    b: b,
    z: z
}; }

AndYNGate = "  ANDYN _" [0-9]+ "_ (\n"
    "    .A(" a:Identifier "),\n"
    "    .B(" b:Identifier "),\n"
    "    .Z(" z:Identifier ")\n"
    "  );\n" { return {
    type: "gate",
    gate: "andyn",
    a: a,
    b: b,
    z: z
}; }

NandGate = "  NAND _" [0-9]+ "_ (\n"
    "    .A(" a:Identifier "),\n"
    "    .B(" b:Identifier "),\n"
    "    .Z(" z:Identifier ")\n"
    "  );\n" { return {
    type: "gate",
    gate: "nand",
    a: a,
    b: b,
    z: z
}; }

OrGate = "  OR _" [0-9]+ "_ (\n"
    "    .A(" a:Identifier "),\n"
    "    .B(" b:Identifier "),\n"
    "    .Z(" z:Identifier ")\n"
    "  );\n" { return {
    type: "gate",
    gate: "or",
    a: a,
    b: b,
    z: z
}; }

OrYNGate = "  ORYN _" [0-9]+ "_ (\n"
    "    .A(" a:Identifier "),\n"
    "    .B(" b:Identifier "),\n"
    "    .Z(" z:Identifier ")\n"
    "  );\n" { return {
    type: "gate",
    gate: "oryn",
    a: a,
    b: b,
    z: z
}; }

NorGate = "  NOR _" [0-9]+ "_ (\n"
    "    .A(" a:Identifier "),\n"
    "    .B(" b:Identifier "),\n"
    "    .Z(" z:Identifier ")\n"
    "  );\n" { return {
    type: "gate",
    gate: "nor",
    a: a,
    b: b,
    z: z
}; }

XorGate = "  XOR _" [0-9]+ "_ (\n"
    "    .A(" a:Identifier "),\n"
    "    .B(" b:Identifier "),\n"
    "    .Z(" z:Identifier ")\n"
    "  );\n" { return {
    type: "gate",
    gate: "xor",
    a: a,
    b: b,
    z: z
}; }

XnorGate = "  XNOR _" [0-9]+ "_ (\n"
    "    .A(" a:Identifier "),\n"
    "    .B(" b:Identifier "),\n"
    "    .Z(" z:Identifier ")\n"
    "  );\n" { return {
    type: "gate",
    gate: "xnor",
    a: a,
    b: b,
    z: z
}; }

MuxGate = "  MUX _" [0-9]+ "_ (\n"
    "    .F(" f:Identifier "),\n"
    "    .SEL(" sel:Identifier "),\n"
    "    .T(" t:Identifier "),\n"
    "    .Z(" z:Identifier ")\n"
    "  );\n" { return {
    type: "gate",
    gate: "mux",
    t: t,
    f: f,
    sel: sel,
    z: z
}; }

Size = "[" begin:[0-9]+ ":" end:[0-9]+ "]" {
    return parseInt(begin.join("")) - parseInt(end.join("")) + 1;
}

Identifier
    = "_" n:[0-9]+ "_" { return {
        type: "identifier",
        value: "_" + n.join("") + "_"
    }; }
    / name:[A-Za-z0-9_]+ index:ArrayIndex? { return {
        type: "identifier",
        value: name.join(""),
        index: index
    }; }
    / "\\" name:[^ ]+ " " { return {
        type: "identifier",
        value: name.join("")
    }; }

ArrayIndex = "[" begin:[0-9]+ end:(":" end:[0-9]+)? "]" { return {
    begin: parseInt(begin.join("")),
    end: end === null ? null : parseInt(end.slice(1).join(""))
}; }