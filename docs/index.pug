doctype html
title Getting started with Glovebox
link(rel="stylesheet" href="./css/tbmfw.css")
link(rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/9.7.0/styles/default.min.css")
h1(style="text-align: center") Getting started with Glovebox

p This document is meant to be a hands-on guide to using Glovebox for C++ developers. You can find more detailed information in the reference (#[tt docs/reference.md]).

p You can find both client and server code examples; use the buttons below to hide one or the other.

// Yes, I'm a bad person who uses tables for layout.
table(width="100%"): tr
	td: label
		input(type="radio" name="radio" id="radioBoth" checked)
		| &nbsp;View both
	td: label
		input(type="radio" name="radio" id="radioServer")
		| &nbsp;Server only
	td: label
		input(type="radio" name="radio" id="radioClient")
		| &nbsp;Client only

h2 Key generation

p As with all encryption libraries, you must generate keys before you can do anything useful. You can find a short program in #[tt examples/keygen/main.cpp]; just compile it, run it once, and distribute the keys securely. Note that it will generate a keypair, with #[tt secret.key] being the secret key (which allows one to encrypt and decrypt data) and #[tt cloud.key] being the public key (which allows one to make computations on data, but not decrypt it).

h2 Boilerplate

p: em todo: add compilation command

p: em todo: document #[tt GB_SERVER]. critical!

p This is the minimum required to make a Glovebox client-server application. It relies on #[a(href="https://github.com/rpclib/rpclib/") rpclib] to handle the client-server communication: of course, you're free to use a RPC library/mechanism of your choice. Compile with #[code g++ client.cpp ???].

p The usage of #[tt ClientParams] and #[tt ServerParams] is not of interest for most applications, so you can just copy&amp;paste it. If you're interested in the internals anyway, they are explored in the reference.

pre.client: code.hljs
	:highlight(lang="c++")
		#include <glovebox.h>
		#include <rpc/client.h>
		#include <rpc/rpc_error.h>

		thread_local ClientParams client_params;

		int main() {
			ClientKey key = read_client_key("secret.key");
			if (key == nullptr) {
				puts("secret.key not found: run ./keygen first.");
				return 1;
			}
			client_params = ClientParams(key);

			rpc::client client("127.0.0.1", 8000);

			// Code here...

			free_client_key(key);
		}
pre.server: code.hljs
	:highlight(lang="c++")
		#include <glovebox.h>
		#include <rpc/server.h>

		thread_local ServerParams server_params;

		int main() {
			ServerKey key = read_server_key("cloud.key");
			if (key == nullptr) {
				puts("cloud.key not found: run ./keygen first.");
				return 1;
			}
			server_params = ServerParams(key);

			rpc::server srv(8000);

			// Handlers here...

			srv.run();

			free_server_key(key);
		}

h2 Minimal example: addition

p Let's head straight into something you can use: a (client-server) application where the client sends two numbers and the server adds them together.

p This example shows the basics of using Glovebox. Starting from the client code, and leaving aside the details of #[code Int&lt;8&gt;] for a moment, the first thing you can see is the creation of encrypted objects. #[code Int8 a = 1] will create an #[em encrypted] Int object from the number #[tt 1], which is ready to be sent across the network. All that's left to do is serialize it into a string with #[code .serialize()], and then pass it to the RPC library to send it to the server.

p The server deserializes the strings into encrypted Ints (which it can't decrypt!), and then operates on them. For performance reasons there are no overloaded operators, and you must call methods instead. When you send data back to the client you simply serialize it, and the client will deserialize it before transforming it - decrypt it, really - into a plaintext int.

pre.client: code.hljs
	:highlight(lang="c++")
		using Int8 = Int<8>;
		// The constructor creates encrypted objects from plaintext numbers
		Int8 a = 1, b = 1;
		// Explicit serialization and deserialization
		std::string output = client.call("add", a.serialize(), b.serialize()).as<std::string>();
		Int8 result(output);
		// An idiomatic alternative that makes use of implicit deserialization would be:
		// Int8 result = client.call("add", a.serialize() ...).as<std::string>();
		std::cout << "Result: " << result.toInt() << std::endl;
pre.server: code.hljs
	:highlight(lang="c++")
		// This is an example of binding a procedure. The .bind part will be skipped in the other examples.
		srv.bind("add", [](std::string a_str, std::string b_str) {
			// Deserialization happens in the constructor.
			Int8 a(a_str), b(b_str);
			Int8 result = 0;
			result.add(first, second);
			return result.serialize();
		});

h2 Primitives: back to bits

p: em todo: document utilities for bitspans (memcpy etc)

p The fundamental data type is #[code bit_t], which represents an encrypted bit. Its building blocks are logic gates (NOT, AND, OR... + MUX), and map directly to TFHE operations on #[code LweSample]s. A useful construct is #[code bitspan_t], which looks like a dynamic array of #[code bit_t] (but it's not resizable); all other datatypes are abstractions on top of bits and bitspans. For this reason, you can access the underlying bitspan for such datatypes with #[code .data()] (least significant bit first).

td: pre: code.hljs
	:highlight(lang="c++")
		// Allocate a bit; it will be deallocated automatically when it goes out of scope
		bit_t foo = make_bit(), bar = make_bit(), baz = make_bit();
		bit_t output = make_bit();
		_and(output, foo, bar); // output = foo AND bar
		_oryn(output, foo, bar); // output = foo OR NOT bar
		_nand(output, foo, bar);
		_mux(output, foo, bar, baz); // output = foo ? bar : baz

		// The size of bitspans is fixed and determined at initialization.
		// They are also deallocated automatically when going out of scope.
		bitspan_t test = make_bitspan(3);
		_and(test[0], test[1], test[2]);

		Int<8> test_int = 9; // Binary: 00001001
		// Let's manipulate the raw bits!
		write(test_int.data()[2], true);
		// test_int is now 00001101. And indeed...
		printf("%d\n", test_int.toInt()); // Will print 13

h2 Encryption, decryption, assignments

p Glovebox, and homomorphic encryption in general, makes a difference between #[em assigning a constant] or a #[em encrypting a value]. The first refers to writing public, non-sensitive data into a variable (eg. a counter that is initialized to zero), while the second refers to writing private, sensitive data into a variable (eg. a patient's weight). They both produce encrypted objects, but the former is implemented as a dummy "encryption" that is easily reversed, while the latter uses real encryption.

p
	| To prevent API mistakes that would result in a critical security failure, Glovebox different methods:
	ul
		li #[code constant()] does the former, and can only be used from servers; using it in clients will cause a crash, so that you don't mistakenly transmit sensitive data in clear.
		li #[code encrypt()] does the latter, and can only be used from clients; in server code it isn't declared in the first place, since you wouldn't have a key to use it with.
		li #[code write()] automatically selects the correct method. This is what you should prefer.
		li #[code _unsafe_constant()] lets you override the check and assign constants even in client code. As it is unsafe, use it when you're certain you're dealing with public data, eg. initializing variables to a blank state.

p Constructors for objects will use the appropriate method: something like #[code Int&lt;8&gt; a = 1] will always do the right thing (encrypt #[tt 1] if you're a client, set a constant #[tt 1] if you're a server).

pre.client: code.hljs
	:highlight(lang="c++")
		bit_t my_data = make_bit();
		// This will be "truly" encrypted
		encrypt(my_data, true);
		// Preferred idiom
		write(my_data, true);

		Int<8> my_num = 1;
pre.server: code.hljs
	:highlight(lang="c++")
		bit_t my_data = make_bit();
		// This will use a dummy encryption
		constant(my_data, true);
		// Preferred idiom
		write(my_data, true);

		Int<8> my_num = 1;

.server
	h2 Flow control

	p Flow control in homomorphically encrypted environments works somewhat differently than in standard computing. For an intuitive explanation, think of writing an application that receives an encrypted bit from the client, with an #[code if] that performs very expensive operations (eg. 100 float multiplications) and an #[code else] that performs some simpler ones (eg. one xor). If the #[code if] construct behaved the way it usually does, you could simply time your program and infer that the encrypted bit was #[tt 0] if it took very little, and #[tt 1] if it took very long.

	p For this reason, traditional flow control isn't possible. We can however emulate a traditional #[code if] by always executing the branch #[em but] using the condition bit as a mask (specifically, an input to a mux): when the mask is high, the data computed in the branch is copied to memory, and when it is low, nothing happens (the original data is copied onto itself). Consider this practical example:

	p: em todo: implement an elvis operator to use a single mux. signature: #[code elvis(bits&lt;N&gt; output, bit_t cond, bits&lt;N&gt; _if, bits&lt;N&gt; _else)]

	pre: code.hljs
		:highlight(lang="c++")
			bit_t isPremiumCustomer = /* some encrypted data from the client */;
			Int<8> price = /* likewise */;
			// A snippet that applies a -5 discount if the customer is "premium"
			_if(whatOperation, [&](bit_t mask) {
				// Do the operation in a temporary variable
				Int<8> tmpResult = 0;
				tmpResult.sub(price, 5);
				// Copy tmpResult into result if mask is true; do nothing otherwise
				_mux(shouldAdd, result.data(), tmpResult.data(), result.data());
			});

			// Will compile to:

			bit_t mask = make_bit();
			_copy(mask, whatOperation);
			// Do the operation in a temporary variable
			Int<8> tmpResult = 0;
			tmpResult.sub(price, 5);
			_mux(mask, result.data(), tmpResult.data(), result.data());

	p There's also an #[code _if_else] construct, which works just like you expect. However, note that implementing operations like #[code result = cond ? a : b] (i.e. writing different data to the same variable depending on a condition) with an #[code if_else] will use two muxes where one would suffice. In such cases, use the #[code elvis] function (yet to be developed!).

	p For similar reasons we can't implement #[code while] directly (hint: you could decrypt ints by setting up an expensive while loop that decrements the variable). What can be done however, is running an #[code if] loop for a fixed (plaintext) number of times, the "limit". This in turn reveals another intrinsic restriction to flow control in homomorphic encryption: you can't have unbounded, data-dependent loops (i.e. a #[code while] that might run for arbitrarily long depending on some encrypted value). In practice, #[code while] loops are very expensive because they generally run the loop a large number of times, so they should be avoided when possible.

	pre: code.hljs
		:highlight(lang="c++")
			/* Plaintext version:
			while (num_mutual_contacts < 3)
				if (is_mutual_contact(/* ... */))
					num_mutual_contacts++;
			*/
			Int<8> num_mutual_contacts = 0;
			// Iterate at most 100 times.
			const int max_iterations = 100;
			// Will run the loop 100 times, and while_mask will be true while the condition is true.
			_while([&]() { return num_mutual_contacts.lesserThan(3); }, max_iterations, [&](bit_t while_mask) {
				bit_t is_contact_mask = is_mutual_contact(/* ... */);
				// Don't forget to combine masks if you have several!
				bit_t mask = make_bit();
				_and(mask, while_mask, is_contact_mask);
				num_mutual_contacts.increment_if(mask);
			});

	p Finally, there's a #[code times] function that replicates the traditional #[code for (i = 0; i &lt; n; i++)] loop. It's a helper function on top of #[code while], so it too takes a maximum number of iterations.

	pre: code.hljs
		:highlight(lang="c++")
			Int<8> num_times = /* some value from the client. Must be <100 */;
			times(num_times, 100, [&](bit_t mask) {
				do_something(mask);
			});

	p.
		#[strong Don't forget to use masks in your flow branches!] Forgetting to do so will cause weird bugs, e.g. an #[code if] that "somehow" runs both the if and the else branch or a #[code while] that straight out ignores the condition.

	p Notice the use of #[code increment_if] in the #[code while] example. It is a helper function that takes a mask variable so you don't have to write out the verbose #[code if] body. There are a few #[code _if] helper functions in Glovebox, and their use is strongly recommended - not only it reduces the complexity of your code and makes it more elegant, they're also potentially more efficient. 

h2 Arrays

p: em todo: mention future improvements in TFHE with packing that might make this faster for plaintext LUTs

p: em todo: implement arrays as vectors, there's no reason for the length to be a template parameter

p: em todo: mention count

p Arrays work more or less the same as traditional arrays, with a key difference. While traditional arrays have constant-time access (it takes the same time to access some position, no matter whether the array has 1 item or 1 billion - caching aside), arrays in Glovebox must essentially compare the index against all positions, so access at an encrypted position runs in linear time. Access with a plaintext position on the other hand is no different than a standard array access, so it is constant-time.

p: em todo: add example

h2 Strings

p Strings are simply an array of ASCII characters with some helper functions - nothing much to be said here.

p: em todo: add example

h4 Credits

p Inspiration from #[a(href="https://learnxinyminutes.com/") learnxinyminutes], CSS from #[a(href="https://thebestmotherfucking.website") TBMFW].
script.
	var serverBlocks = document.getElementsByClassName("server");
	var clientBlocks = document.getElementsByClassName("client");
	document.getElementById("radioBoth").addEventListener("change", function(it) {
		for (var i = 0; i < serverBlocks.length; i++) {
			serverBlocks[i].style.display = "";
			clientBlocks[i].style.display = "";
		}
	});
	document.getElementById("radioServer").addEventListener("change", function(it) {
		for (var i = 0; i < serverBlocks.length; i++) {
			serverBlocks[i].style.display = "";
			clientBlocks[i].style.display = "none";
		}
	});
	document.getElementById("radioClient").addEventListener("change", function(it) {
		for (var i = 0; i < serverBlocks.length; i++) {
			serverBlocks[i].style.display = "none";
			clientBlocks[i].style.display = "";
		}
	});
