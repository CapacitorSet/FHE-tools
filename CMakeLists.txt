cmake_minimum_required(VERSION 3.5)

project(glovebox)

set(CMAKE_RUNTIME_OUTPUT_DIRECTORY bin)
set(CMAKE_CXX_STANDARD 17) # Needed for if constexpr

find_program(CCACHE_FOUND ccache)
if(CCACHE_FOUND)
    set_property(GLOBAL PROPERTY RULE_LAUNCH_COMPILE ccache)
endif(CCACHE_FOUND)

# Create a library

# Generate the static library from the library sources
set(glovebox_SOURCES include/glovebox.h
        src/primitives.cpp
        src/flow_control.cpp
        src/types/int.cpp
        src/autogenerated/add.cpp
        src/autogenerated/mul.cpp
        src/autogenerated/div.cpp
        src/serialization.cpp
        include/parallel.h)

if (PLAINTEXT)
    set(glovebox_SOURCES ${glovebox_SOURCES} src/tfhe_plaintext.cpp)
else()
    set(glovebox_SOURCES ${glovebox_SOURCES} src/tfhe_tfhev1.cpp)
endif()

add_library(glovebox STATIC ${glovebox_SOURCES})

if (PLAINTEXT)
    add_definitions(-DPLAINTEXT=1)
else()
    add_definitions(-DPLAINTEXT=0)
    # Should we do the linking ourselves, or have the user choose?
    target_link_libraries(glovebox PRIVATE tfhe-spqlios-fma)
endif()

if(CMAKE_BUILD_TYPE MATCHES RELEASE)
    # Hardening: https://wiki.debian.org/Hardening
    target_compile_options(glovebox PUBLIC -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security -fstack-protector-strong -fPIE -fPIC)
    target_link_options(glovebox PUBLIC -D_FORTIFY_SOURCE=2 -fstack-protector-strong -pie -Wl,-z,relro -Wl,-z,now)
else()
    set(ADDITIONAL_COMPILE_FLAGS -Wall -Wextra -Wformat -Wformat-security -Werror=format-security)
    set(ADDITIONAL_LINK_FLAGS "")
    if (PLAINTEXT)
        string(APPEND ADDITIONAL_COMPILE_FLAGS -fsanitize=undefined -fsanitize-trap=bool)
        set(ADDITIONAL_LINK_FLAGS -fsanitize=undefined -fsanitize-trap=bool)
    endif()
    target_compile_options(glovebox PUBLIC ${ADDITIONAL_COMPILE_FLAGS})
    target_link_options(glovebox PUBLIC ${ADDITIONAL_LINK_FLAGS})
endif()

target_include_directories(glovebox PUBLIC ${PROJECT_SOURCE_DIR}/include)

# Create executables

add_executable(keygen examples/keygen/main.cpp)
target_link_libraries(keygen PRIVATE glovebox)

# Fibonacci
add_executable(example_fibonacci_client examples/fibonacci/client.cpp)
target_link_libraries(example_fibonacci_client PRIVATE glovebox rpc pthread)
target_compile_definitions(example_fibonacci_client PRIVATE -DSTRICT_CLIENT_MODE=1)
add_executable(example_fibonacci_server examples/fibonacci/server.cpp)
target_link_libraries(example_fibonacci_server PRIVATE glovebox rpc pthread)

# Linear regression
add_executable(example_linreg_client examples/linreg/client.cpp)
target_link_libraries(example_linreg_client PRIVATE glovebox rpc pthread)
target_compile_definitions(example_linreg_client PRIVATE -DSTRICT_CLIENT_MODE=1)
add_executable(example_linreg_server examples/linreg/server.cpp)
target_link_libraries(example_linreg_server PRIVATE glovebox rpc pthread)

# Contacts
add_executable(example_contacts_client examples/contacts/client.cpp examples/contacts/contact.h)
target_link_libraries(example_contacts_client PRIVATE glovebox rpc pthread)
target_compile_definitions(example_contacts_client PRIVATE -DSTRICT_CLIENT_MODE=1)
add_executable(example_contacts_server examples/contacts/server.cpp examples/contacts/contact.h)
target_link_libraries(example_contacts_server PRIVATE glovebox rpc pthread)

# Health data
add_executable(example_health_client
        examples/health/client.cpp
        examples/health/patient.h)
target_link_libraries(example_health_client PRIVATE glovebox rpc pthread)
target_compile_definitions(example_health_client PRIVATE -DSTRICT_CLIENT_MODE=1)
add_executable(example_health_server
        examples/health/server.cpp
        examples/health/patient.h)
target_link_libraries(example_health_server PRIVATE glovebox rpc pthread)

if (TESTS_ENABLED)
    # http://www.kaizou.org/2014/11/gtest-cmake/
    ############# start
    find_package(Threads REQUIRED)
    include(ExternalProject)
    ExternalProject_Add(
            gtest
            URL https://github.com/google/googletest/archive/release-1.8.1.zip
            URL_MD5 ad6868782b5952b7476a7c1c72d5a714
            PREFIX ${CMAKE_CURRENT_BINARY_DIR}/gtest
            INSTALL_COMMAND ""
    )
    ExternalProject_Get_Property(gtest source_dir binary_dir)
    add_library(libgtest IMPORTED STATIC GLOBAL)
    add_dependencies(libgtest gtest)
    set_target_properties(libgtest PROPERTIES
            "IMPORTED_LOCATION" "${binary_dir}/googlemock/gtest/libgtest.a"
            "IMPORTED_LINK_INTERFACE_LIBRARIES" "${CMAKE_THREAD_LIBS_INIT}"
            )
    add_library(libgmock IMPORTED STATIC GLOBAL)
    add_dependencies(libgmock gtest)
    set_target_properties(libgmock PROPERTIES
            "IMPORTED_LOCATION" "${binary_dir}/googlemock/libgmock.a"
            "IMPORTED_LINK_INTERFACE_LIBRARIES" "${CMAKE_THREAD_LIBS_INIT}"
            )
    include_directories("${source_dir}/googletest/include"
            "${source_dir}/googlemock/include")
    ############# end
    add_executable(glovebox_test
            tests/main.cpp
            tests/FHEContext.cpp
            tests/gates.cpp
            tests/primitives.cpp
            tests/flow_control.cpp
            tests/int.cpp
            tests/array.cpp
            tests/string.cpp
            tests/fixed.cpp
            tests/serialization.cpp
            )
    add_subdirectory("${PROJECT_SOURCE_DIR}/rapidcheck")
    add_subdirectory("${PROJECT_SOURCE_DIR}/rapidcheck/extras/gtest")
    target_link_libraries(glovebox_test glovebox libgtest libgmock rapidcheck rapidcheck_gtest)
    add_test(glovebox_test glovebox_test)
endif()
